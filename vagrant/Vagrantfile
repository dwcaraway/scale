# -*- mode: ruby -*-
# vi: set ft=ruby :

# Minimal vagrant version required by vagrant-hostmanager plugin
Vagrant.require_version('>= 1.8.1')

# Check required plugins
REQUIRED_PLUGINS = %w(vagrant-hostmanager vagrant-vbguest).freeze

REQUIRED_PLUGINS.each do |plugin|
  raise "Missing required plugin. Install the latest plugin version with\n\nvagrant plugin install #{plugin}" unless Vagrant.has_plugin?(plugin)
end

##
# This will provision a couple of machines for a test cluster.
# One will act as zookeeper, master, db, scheduler, and web server.
# The other will be an execution slave.
DEFAULT_USERNAME = 'root'
DEFAULT_PASSWORD = 'vagrant'

SLAVE_RAM = 2048
SLAVE_CPUS = 4
NETWORK_IPS = %w(10.4.4.10 10.4.4.20 10.4.4.21).freeze
NETMASK = '255.255.255.0'.freeze

# centos7 with virtualbox guest additions
VM_BOX = 'bings/centos-7-btrfs'.freeze

HOST_PROJECT_FOLDER = File.absolute_path(File.join(File.dirname(__FILE__), '..'))

HOSTS = [
  {
    name: 'scale-master',
    ipaddr: NETWORK_IPS[0],
    netmask: NETMASK,
    mem_size: 1024,
    cpu_count: 3,
    sync_config: { host_folder: HOST_PROJECT_FOLDER, guest_folder: '/synced/' } 
  },

  {
    name: 'scale-slave1',
    ipaddr: NETWORK_IPS[1],
    netmask: NETMASK,
    mem_size: SLAVE_RAM,
    cpu_count: SLAVE_CPUS
  },

  {
    name: 'scale-slave2',
    ipaddr: NETWORK_IPS[2],
    netmask: NETMASK,
    mem_size: SLAVE_RAM,
    cpu_count: SLAVE_CPUS
  }
].freeze

# Ansible Provisioner
ANSIBLE_PLAYBOOK = File.join(HOST_PROJECT_FOLDER, '/ansible/vagrant.yml')

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  config.hostmanager.enabled = true
  config.hostmanager.manage_host = true
  config.hostmanager.ignore_private_ip = false
  config.hostmanager.include_offline = true

  #ssh authentication
  config.ssh.username = DEFAULT_USERNAME
  config.ssh.password = DEFAULT_PASSWORD

  HOSTS.each do |cfg|
    config.vm.define(cfg[:name]) do |machine|
      machine.vm.box = VM_BOX

      # setup network
      machine.vm.hostname = cfg[:name]
      machine.vm.network('private_network', \
                         ip: cfg[:ipaddr], netmask: cfg[:netmask], adapter: 2)

      machine.vm.synced_folder(cfg[:sync_config][:host_folder], cfg[:sync_config][:guest_folder]) if cfg.has_key?(:sync_config)

      # set machine's ram and cpu
      machine.vm.provider('virtualbox') do |vbox|
        vbox.memory = cfg[:mem_size]
        vbox.cpus = cfg[:cpu_count]
      end

      # Should this AWS-provisioning be removed?
      # machine.vm.provider(:aws) do |aws, override|
        # aws.access_key_id = ENV['AWS_KEY']
        # aws.secret_access_key = ENV['AWS_SECRET']
        # aws.keypair_name = ENV['AWS_KEYNAME']

        # AIS base Centos7 AMI: ami-a52071cf

        # aws.ami = 'ami-a52071cf'
        # aws.region = 'us-east-1'
        # aws.instance_type = 'm4.large'

        # request 50GB drive
        # aws.block_device_mapping = [
        #    {
        #       'DeviceName' => "/dev/sda1",
        #       'VirtualName' => 'Root',
        #       'Ebs.VolumeSize' => '50',
        #       'Ebs.VolumeType' => 'gp2',
        #       'Ebs.DeleteOnTermination' => true
        #     }
        # ]

        # aws.tags = { 'Name' => cfg[:name] }
        # aws.security_groups = ['sg-f2ad6a8b']
        # aws.subnet_id = 'subnet-1642a73c'
        # aws.private_ip_address = cfg[:ipaddr]
        # aws.elastic_ip = true
        # override.vm.box = 'dummy'
        # override.ssh.username = 'vagrant'
        # override.ssh.private_key_path = ENV['AWS_KEYPATH']
      # end
    end
  end

  # run the ansible provisioner. rerun with "vagrant provision"
  config.vm.provision(:ansible, run: 'always') do |ansible|
    ansible.playbook = ANSIBLE_PLAYBOOK 
    ansible.verbose = 'vv'
    ansible.groups = {
      'zookeeper' => ['scale-master'],
      'mesos-masters' => ['scale-master'],
      'mesos-slaves' => ['scale-slave1', 'scale-slave2'],
      'db' => ['scale-master'],
      'dns' => ['scale-master'],
      'nfs' => ['scale-master'],
      'registry' => ['scale-master'],
      'build' => ['scale-master'],
      'scale-scheduler' => ['scale-master'],
      'scale-web' => ['scale-master'],
      'mesos:children' => ['mesos-masters', 'mesos-slaves'],
      'scale-framework:children' => ['scale-scheduler', 'scale-web'],
      'vagrant' => ['scale-master', 'scale-slave1', 'scale-slave2']
    }
  end
end
